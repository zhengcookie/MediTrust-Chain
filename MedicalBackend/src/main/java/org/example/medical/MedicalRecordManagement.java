package org.example.medical;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class MedicalRecordManagement extends Contract {
    public static final String[] BINARY_ARRAY = {"","8552505050505050905001915050908152602001604051809103902060070160006101000a81548160ff021916908315150217905550505050565b600080826040518082805190602001908083835b602083101515611053578051825260208201915060208101905060208303925061102e565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600501805460018160011615610100020316600290049050111561112f57600080826040518082805190602001908083835b6020831015156110dd57805182526020820191506020810190506020830392506110b8565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060070160006101000a81548160ff021916908315150217905550611327565b61010060405190810160405280828152602001602060405190810160405280600081525081526020016020604051908101604052806000815250815260200160206040519081016040528060008152508152602001602060405190810160405280600081525081526020016020604051908101604052806000815250815260200160206040519081016040528060008152508152602001600015158152506000826040518082805190602001908083835b60208310151561120557805182526020820191506020810190506020830392506111e0565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000820151816000019080519060200190611254929190611736565b506020820151816001019080519060200190611271929190611736565b50604082015181600201908051906020019061128e929190611736565b5060608201518160030190805190602001906112ab929190611736565b5060808201518160040190805190602001906112c8929190611736565b5060a08201518160050190805190602001906112e5929190611736565b5060c0820151816006019080519060200190611302929190611736565b5060e08201518160070160006101000a81548160ff0219169083151502179055509050505b50565b6000816040518082805190602001908083835b602083101515611362578051825260208201915060208101905060208303925061133d565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060070160009054906101000a900460ff16151561141a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f610000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600080826040518082805190602001908083835b602083101515611453578051825260208201915060208101905060208303925061142e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060070160006101000a81548160ff02191690831515021790555050565b836000866040518082805190602001908083835b6020831015156114dc57805182526020820191506020810190506020830392506114b7565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010190805190602001906115259291906116b6565b50826000866040518082805190602001908083835b60208310151561155f578051825260208201915060208101905060208303925061153a565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060020190805190602001906115a89291906116b6565b50816000866040518082805190602001908083835b6020831015156115e257805182526020820191506020810190506020830392506115bd565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600301908051906020019061162b9291906116b6565b50806000866040518082805190602001908083835b6020831015156116655780518252602082019150602081019050602083039250611640565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060040190805190602001906116ae9291906116b6565b505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106116f757805160ff1916838001178555611725565b82800160010185558215611725579182015b82811115611724578251825591602001919060010190611709565b5b50905061173291906117b6565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061177757805160ff19168380011785556117a5565b828001600101855582156117a5579182015b828111156117a4578251825591602001919060010190611789565b5b5090506117b291906117b6565b5090565b6117d891905b808211156117d45760008160009055506001016117bc565b5090565b905600a165627a7a72305820cd451347fd0979370789d65b7cfdf7997c22cec5c23adc5c7e25bf4250e255960029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","8552505050505050905001915050908152602001604051809103902060070160006101000a81548160ff021916908315150217905550505050565b600080826040518082805190602001908083835b602083101515611053578051825260208201915060208101905060208303925061102e565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600501805460018160011615610100020316600290049050111561112f57600080826040518082805190602001908083835b6020831015156110dd57805182526020820191506020810190506020830392506110b8565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060070160006101000a81548160ff021916908315150217905550611327565b61010060405190810160405280828152602001602060405190810160405280600081525081526020016020604051908101604052806000815250815260200160206040519081016040528060008152508152602001602060405190810160405280600081525081526020016020604051908101604052806000815250815260200160206040519081016040528060008152508152602001600015158152506000826040518082805190602001908083835b60208310151561120557805182526020820191506020810190506020830392506111e0565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000820151816000019080519060200190611254929190611736565b506020820151816001019080519060200190611271929190611736565b50604082015181600201908051906020019061128e929190611736565b5060608201518160030190805190602001906112ab929190611736565b5060808201518160040190805190602001906112c8929190611736565b5060a08201518160050190805190602001906112e5929190611736565b5060c0820151816006019080519060200190611302929190611736565b5060e08201518160070160006101000a81548160ff0219169083151502179055509050505b50565b6000816040518082805190602001908083835b602083101515611362578051825260208201915060208101905060208303925061133d565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060070160009054906101000a900460ff16151561141a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f610000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600080826040518082805190602001908083835b602083101515611453578051825260208201915060208101905060208303925061142e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060070160006101000a81548160ff02191690831515021790555050565b836000866040518082805190602001908083835b6020831015156114dc57805182526020820191506020810190506020830392506114b7565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010190805190602001906115259291906116b6565b50826000866040518082805190602001908083835b60208310151561155f578051825260208201915060208101905060208303925061153a565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060020190805190602001906115a89291906116b6565b50816000866040518082805190602001908083835b6020831015156115e257805182526020820191506020810190506020830392506115bd565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600301908051906020019061162b9291906116b6565b50806000866040518082805190602001908083835b6020831015156116655780518252602082019150602081019050602083039250611640565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060040190805190602001906116ae9291906116b6565b505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106116f757805160ff1916838001178555611725565b82800160010185558215611725579182015b82811115611724578251825591602001919060010190611709565b5b50905061173291906117b6565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061177757805160ff19168380011785556117a5565b828001600101855582156117a5579182015b828111156117a4578251825591602001919060010190611789565b5b5090506117b291906117b6565b5090565b6117d891905b808211156117d45760008160009055506001016117bc565b5090565b905600a165627a7a72305820cd451347fd0979370789d65b7cfdf7997c22cec5c23adc5c7e25bf4250e255960029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"methodSignatureAsString\":\"getMedicalHistory(string)\",\"name\":\"getMedicalHistory\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"patientID\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}]},{\"methodSignatureAsString\":\"fillInMedicalHistory(string,string,string)\",\"name\":\"fillInMedicalHistory\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"patientID\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"pastMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"currentMedicalHistory\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"startConsultation(string)\",\"name\":\"startConsultation\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"patientID\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"endConsultation(string)\",\"name\":\"endConsultation\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"patientID\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"updateMedicalRecord(string,string,string,string,string)\",\"name\":\"updateMedicalRecord\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"patientID\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"hospitalName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"department\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"doctorName\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"registrationInfo\",\"type\":\"string\",\"internalType\":\"\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[]}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GETMEDICALHISTORY = "getMedicalHistory";

    public static final String FUNC_FILLINMEDICALHISTORY = "fillInMedicalHistory";

    public static final String FUNC_STARTCONSULTATION = "startConsultation";

    public static final String FUNC_ENDCONSULTATION = "endConsultation";

    public static final String FUNC_UPDATEMEDICALRECORD = "updateMedicalRecord";

    public MedicalRecordManagement(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public Tuple6<String, String, String, String, String, String> getMedicalHistory(String patientID) throws ContractException {
        final Function function = new Function(FUNC_GETMEDICALHISTORY, 
                Arrays.<Type>asList(new Utf8String(patientID)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple6<String, String, String, String, String, String>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue());
    }

    public TransactionReceipt fillInMedicalHistory(String patientID, String pastMedicalHistory, String currentMedicalHistory) {
        final Function function = new Function(
                FUNC_FILLINMEDICALHISTORY, 
                Arrays.<Type>asList(new Utf8String(patientID),
                new Utf8String(pastMedicalHistory),
                new Utf8String(currentMedicalHistory)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] fillInMedicalHistory(String patientID, String pastMedicalHistory, String currentMedicalHistory, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FILLINMEDICALHISTORY, 
                Arrays.<Type>asList(new Utf8String(patientID),
                new Utf8String(pastMedicalHistory),
                new Utf8String(currentMedicalHistory)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFillInMedicalHistory(String patientID, String pastMedicalHistory, String currentMedicalHistory) {
        final Function function = new Function(
                FUNC_FILLINMEDICALHISTORY, 
                Arrays.<Type>asList(new Utf8String(patientID),
                new Utf8String(pastMedicalHistory),
                new Utf8String(currentMedicalHistory)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getFillInMedicalHistoryInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FILLINMEDICALHISTORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt startConsultation(String patientID) {
        final Function function = new Function(
                FUNC_STARTCONSULTATION, 
                Arrays.<Type>asList(new Utf8String(patientID)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] startConsultation(String patientID, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_STARTCONSULTATION, 
                Arrays.<Type>asList(new Utf8String(patientID)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForStartConsultation(String patientID) {
        final Function function = new Function(
                FUNC_STARTCONSULTATION, 
                Arrays.<Type>asList(new Utf8String(patientID)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getStartConsultationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_STARTCONSULTATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt endConsultation(String patientID) {
        final Function function = new Function(
                FUNC_ENDCONSULTATION, 
                Arrays.<Type>asList(new Utf8String(patientID)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] endConsultation(String patientID, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ENDCONSULTATION, 
                Arrays.<Type>asList(new Utf8String(patientID)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForEndConsultation(String patientID) {
        final Function function = new Function(
                FUNC_ENDCONSULTATION, 
                Arrays.<Type>asList(new Utf8String(patientID)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getEndConsultationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ENDCONSULTATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt updateMedicalRecord(String patientID, String hospitalName, String department, String doctorName, String registrationInfo) {
        final Function function = new Function(
                FUNC_UPDATEMEDICALRECORD, 
                Arrays.<Type>asList(new Utf8String(patientID),
                new Utf8String(hospitalName),
                new Utf8String(department),
                new Utf8String(doctorName),
                new Utf8String(registrationInfo)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateMedicalRecord(String patientID, String hospitalName, String department, String doctorName, String registrationInfo, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEMEDICALRECORD, 
                Arrays.<Type>asList(new Utf8String(patientID),
                new Utf8String(hospitalName),
                new Utf8String(department),
                new Utf8String(doctorName),
                new Utf8String(registrationInfo)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateMedicalRecord(String patientID, String hospitalName, String department, String doctorName, String registrationInfo) {
        final Function function = new Function(
                FUNC_UPDATEMEDICALRECORD, 
                Arrays.<Type>asList(new Utf8String(patientID),
                new Utf8String(hospitalName),
                new Utf8String(department),
                new Utf8String(doctorName),
                new Utf8String(registrationInfo)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, String, String, String> getUpdateMedicalRecordInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEMEDICALRECORD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public static MedicalRecordManagement load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new MedicalRecordManagement(contractAddress, client, credential);
    }

    public static MedicalRecordManagement deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(MedicalRecordManagement.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }
}
